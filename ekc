#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import io
import re
import boto3
import argparse
import inquirer
import threading
import queue
import subprocess
from botocore.config import Config
from prettytable import PrettyTable


parser = argparse.ArgumentParser()
parser.add_argument("-r", "--region", help="If a single region is provided, only clusters in that region will be searched")
parser.add_argument("-p", "--profile", help="Use this profile to search for clusters")
parser.add_argument("-l", "--list", help="Just list found EKS clusters and exit", action="store_true", default=False)
parser.add_argument("-t", "--tag", help="Fetch additional cluster's tags to add to --list by tag key, ie: -t CreatedBy")
parser.add_argument("--role-arn", help="Append the --role-arn argument to the commands")
parser.add_argument("--kubeconfig", help="Configure the specified file instead of the user's kubeconfig")
parser.add_argument("-v", "--verbose", help="Verbose output", action="store_true", default=False)
parser.add_argument("-s", "--search", help="Verbose output")

args = parser.parse_args()

boto_config = Config(connect_timeout=5, read_timeout=5, retries={'max_attempts': 1})


def main():

    regions = []

    if args.profile:
        try:
            boto3.setup_default_session(profile_name=args.profile)
        except:
            avail_profiles = boto3.session.Session().available_profiles
            print("Profile '" + args.profile + "' not found, available profiles: " + ", ".join(avail_profiles))
            exit()

    if args.region:
        regions = [args.region]
    else:
        # List all regions available - a region is set just in case the aws cli has no default
        client_ec2 = boto3.client('ec2', 'eu-west-1', config=boto_config)
        regions = [region['RegionName'] for region in client_ec2.describe_regions()['Regions']]
        # regions = ['af-south-1', 'eu-south-1', 'me-south-1', 'ap-east-1' ]

    threads = []
    queues = []

    for region in regions:

        if args.verbose:
            print("Searching " + region)

        q = queue.Queue()

        t = threading.Thread(target=cluster_details_t, args=(region, q,), name='details_' + region)
        t.start()
        threads.append(t)
        queues.append(q)

    for t in threads:
        t.join(10)

    cluster_attr = []

    for q in queues:
        if q.qsize() > 0:
            cluster_attr.append(q.get())

    if not cluster_attr:
        print("No clusters found")
        exit()

    if args.list or args.search:
        arrHeaders = ["Name", "Region", "CreationDate", "K8S Version"]

        if args.tag:
            arrHeaders.append(args.tag)
        if args.search:
            arrHeaders.append(args.search)

        pt = PrettyTable(arrHeaders)
        pt.align = "l"

        for attr in cluster_attr:
            base_values = [attr['cluster'], attr['region'], attr['createdAt'], attr['version']]

            if args.tag:
                base_values.append(attr[args.tag])

            if args.search:
                cmd = "aws eks update-kubeconfig --region {} --name {}".format(attr['region'], attr['cluster'])
                found = pod_search(cmd, args.search)
                base_values.append(found)

            pt.add_row(base_values)

        print(pt.get_string(sortby="Name"))

    else:

        commands = []

        for attr in cluster_attr:
            cluster = attr['cluster']
            region = attr['region']

            if args.kubeconfig:
                base_command = ["aws", "eks", "update-kubeconfig",
                                "--kubeconfig " + args.kubeconfig, "--region {}", "--name {}"]
            else:
                base_command = ["aws", "eks", "update-kubeconfig", "--region {}", "--name {}"]

            if args.role_arn:
                base_command.append("--role-arn " + args.role_arn)

            if args.profile:
                base_command.append("--profile " + args.profile)

            commands.append(' '.join(base_command).format(region, cluster))

        if commands:
            commands.append("Exit")

            questions = [inquirer.List("command", message="Command: ", choices=commands, ), ]

            try:
                cmd = inquirer.prompt(questions)['command']

                if cmd != "Exit":
                    os.system(cmd)
                else:
                    print("Command not executed")

            except:
                print("Command not executed")


# https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/python/example_code/eks/list_clusters.py
def list_clusters(max_clusters=10, iter_marker='', aws_region='eu-west-1'):
    try:
        eks = boto3.client('eks', region_name=aws_region, config=boto_config)
    except Exception as e:
        print(e)

    clusters = eks.list_clusters(maxResults=max_clusters, nextToken=iter_marker)
    marker = clusters.get('nextToken')
    return clusters['clusters'], marker


def cluster_details(cluster_name, aws_region):
    eks = boto3.client('eks', region_name=aws_region, config=boto_config)

    try:
        response = eks.describe_cluster(name=cluster_name)
    except:
        return None
    return response['cluster']


def cluster_details_t(region, q):

    try:
        clusters, marker = list_clusters(aws_region=region)
    except:
        clusters, marker = [], None

    if not clusters:
        if args.verbose:
            print(region + ': No clusters found')

    else:
        while True:
            for cluster in clusters:
                det = cluster_details(cluster, region)
                createdAt = det['createdAt'].strftime("%Y-%m-%d, %H:%M:%S")
                version = det['version']

                attributes = {}

                if args.tag:
                    try:
                        tag = cluster_details(cluster, region)['tags'][args.tag]
                    except Exception as e:
                        tag = "NotFound"
                        print(str(e))

                    attributes[args.tag] = tag

                attributes['cluster'] = cluster
                attributes['region'] = region
                attributes['createdAt'] = createdAt
                attributes['version'] = version

                q.put(attributes)

            # If no more clusters exist, exit loop, retrieve the next batch otherwise
            if marker is None:
                break
            clusters, marker = list_clusters(iter_marker=marker, aws_region=region)


def pod_search(cmd, search_term):
    tmp_kubeconfig = ".tmp_kubeconfig"
    command = cmd.split()
    command.extend(["--kubeconfig", tmp_kubeconfig])
    subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()
    src_command = "kubectl --kubeconfig " + tmp_kubeconfig + " get pods -A"
    get_pods = subprocess.Popen(src_command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    get_pods.wait()
    if os.path.isfile(tmp_kubeconfig):
        os.remove(tmp_kubeconfig)

    for line in io.TextIOWrapper(get_pods.stdout, encoding="utf-8"):
        re_match = re.search(r'.*' + search_term + '.*', line)
        if re_match:
            return True

    return False


if __name__ == '__main__':
    main()

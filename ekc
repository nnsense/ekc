#!/usr/bin/python3
# -*- coding: utf-8 -*-
# pylint: disable=bare-except, too-many-locals, line-too-long

import os
import io
import re
import sys
import boto3
import argparse
import inquirer
import threading
import queue
import subprocess
from botocore.config import Config
from prettytable import PrettyTable
import configparser

parser = argparse.ArgumentParser()
parser.add_argument("-R", "--region", help="One or more regions to scan. If unset will scan all regions.")
parser.add_argument("-l", "--list", help="List all EKS clusters found and exit", action="store_true", default=False)
parser.add_argument("-t", "--tag", help="Fetch additional cluster's tags to add to --list by tag key, ie: -t CreatedBy.")
parser.add_argument("--role-arn", help="Append the --role-arn argument to the output commands. If multiple profiles are available (so, different role names), set the config file")
parser.add_argument("-k", "--kubeconfig", help="Configure the specified file instead of the user's default kubeconfig (~/.kube/config).")
parser.add_argument("-p", "--profile", help="Use this profile to search for clusters. If unset will scan the 'default' profile.")
parser.add_argument("-A", "--all", help="Search across all AWS profiles configured in aws cli config file.", action="store_true", default=False)
parser.add_argument("-v", "--verbose", help="Verbose output (for troubleshooting).", action="store_true", default=False)
parser.add_argument("-s", "--search", help="Search for specific pod name across clusters (useful to check if a cluster is running an application or not.)")

args = parser.parse_args()

boto_config = Config(connect_timeout=5, read_timeout=5, retries={'max_attempts': 1})

config_parser = configparser.ConfigParser()
home = os.path.expanduser("~")
config_parser.read(home + '/.ekc_config')

'''
Note: to use multiple accounts with different role_arn(s), a config file is required.
By default, this is set to be `~/.ekc_config`

Example config file:

[prod]
role_arn = "arn:aws:iam::654321234567:role/eks-production-k8s-role"

[dev]
role_arn = "arn:aws:iam::876543212345:role/eks-dev-k8s-role"
'''

def main():

    regions = []

    avail_profiles = boto3.session.Session().available_profiles
    profiles = {}

    if args.profile:
        try:
            profiles[args.profile] = boto3.session.Session(profile_name=args.profile)
        except:
            print("Profile '" + args.profile + "' not found, available profiles: " + ", ".join(avail_profiles))
            sys.exit(1)
    elif args.all:
        for profile in avail_profiles:
            profiles[profile] = boto3.session.Session(profile_name=profile)

    if args.region:
        regions = [args.region]
    else:
        # List all regions available - a region is set just in case the aws cli has no default
        for profile, session in profiles.items():
            # Try each profile until we don't find a working one
            client_ec2 = session.client('ec2', 'eu-west-1', config=boto_config)

            try:
                regions = [region['RegionName'] for region in client_ec2.describe_regions()['Regions']]
            except:
                continue

            if len(regions) >= 1:
                break

    threads = []
    cmd_queue = queue.Queue()

    for region in regions:
        for profile, session in profiles.items():

            if args.verbose:
                print("Searching " + region + "(" + profile + ")")

            thread = threading.Thread(target=cluster_details_t, args=(region, profile, session, cmd_queue,), name='details_' + region)
            thread.start()
            threads.append(thread)

    for thread in threads:
        thread.join(10)

    cluster_attr = []

    while not cmd_queue.empty():
        cluster_attr.append(cmd_queue.get())

    if not cluster_attr:
        print("No clusters found")
        sys.exit(1)

    if args.list or args.search:
        table_headers = ["Name", "Region", "CreationDate", "K8S Version", "Profile"]

        if args.tag:
            table_headers.append(args.tag)
        if args.search:
            table_headers.append(args.search)

        table = PrettyTable(table_headers)
        table.align = "l"

        for attr in cluster_attr:
            base_values = [attr['cluster'], attr['region'], attr['createdAt'], attr['version'], attr['profile']]

            if args.tag:
                base_values.append(attr[args.tag])

            if args.search:
                cmd = "aws eks update-kubeconfig --region {} --name {}".format(attr['region'], attr['cluster'])
                found = pod_search(cmd, args.search)
                base_values.append(found)

            table.add_row(base_values)

        print(table.get_string(sortby="Name"))

    else:

        commands = []

        for attr in cluster_attr:
            cluster = attr['cluster']
            region = attr['region']
            profile = attr['profile']

            if args.kubeconfig:
                base_command = ["aws", "eks", "update-kubeconfig",
                                "--kubeconfig " + args.kubeconfig, "--region {}", "--name {}"]
            else:
                base_command = ["aws", "eks", "update-kubeconfig", "--region {}", "--name {}"]

            if args.role_arn:
                base_command.append("--role-arn " + args.role_arn)
            elif config_parser[profile]["role_arn"]:
                base_command.append("--role-arn " + config_parser[profile]["role_arn"])

            if args.profile or args.all:
                base_command.append("--profile " + profile)

            commands.append(' '.join(base_command).format(region, cluster))

        if commands:
            commands.append("Exit")

            questions = [inquirer.List("command", message="Command: ", choices=commands, ), ]

            try:
                cmd = inquirer.prompt(questions)['command']

                if cmd != "Exit":
                    os.system(cmd)
                else:
                    print("Command not executed")

            except:
                print("Command not executed")

# https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/python/example_code/eks/list_clusters.py
def list_clusters(max_clusters=100, iter_marker='', session='', aws_region='eu-west-1'):
    eks = session.client('eks', region_name=aws_region, config=boto_config)
    clusters = eks.list_clusters(maxResults=max_clusters, nextToken=iter_marker)
    marker = clusters.get('nextToken')
    return clusters['clusters'], marker


def cluster_details(cluster_name, session, aws_region):
    eks = session.client('eks', region_name=aws_region, config=boto_config)

    try:
        response = eks.describe_cluster(name=cluster_name)
    except:
        return None
    return response['cluster']


def cluster_details_t(region, profile, session, cmd_queue):
    try:
        clusters, marker = list_clusters(session=session, aws_region=region)
    except:
        clusters, marker = [], None

    if not clusters:
        if args.verbose:
            print(region + ': No clusters found')

    else:
        while True:
            for cluster in clusters:
                det = cluster_details(cluster, session, region)
                created_at = det['createdAt'].strftime("%Y-%m-%d, %H:%M:%S")
                version = det['version']

                attributes = {}

                if args.tag:
                    try:
                        tag = cluster_details(cluster, session, region)['tags'][args.tag]
                    except Exception as e:
                        tag = "NotFound"
                        print(str(e))

                    attributes[args.tag] = tag

                attributes['cluster'] = cluster
                attributes['region'] = region
                attributes['createdAt'] = created_at
                attributes['version'] = version
                attributes['profile'] = profile

                cmd_queue.put(attributes)

            # If no more clusters exist, exit loop, retrieve the next batch otherwise
            if marker is None:
                break
            clusters, marker = list_clusters(iter_marker=marker, aws_region=region)


def pod_search(cmd, search_term):
    tmp_kubeconfig = ".tmp_kubeconfig"
    command = cmd.split()
    command.extend(["--kubeconfig", tmp_kubeconfig])
    subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()
    src_command = "kubectl --kubeconfig " + tmp_kubeconfig + " get pods -A"
    get_pods = subprocess.Popen(src_command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    get_pods.wait()

    if os.path.isfile(tmp_kubeconfig):
        os.remove(tmp_kubeconfig)

    for line in io.TextIOWrapper(get_pods.stdout, encoding="utf-8"):
        re_match = re.search(r'.*' + search_term + '.*', line)
        if re_match:
            return True

    return False


if __name__ == '__main__':
    main()

#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os,io,re
import boto3
import argparse
import subprocess
from datetime import datetime
from pprint import pprint

parser = argparse.ArgumentParser()
parser.add_argument("-r", "--region", help="If a single region is provided, only clusters in that region will be searched")
parser.add_argument("-p", "--profile", help="Use this profile to search for clusters")
parser.add_argument("-s", "--search", help="This script is checking if a deployment exists. Set with -p the pod name to search for, ie 'mypod' ", required=True)
parser.add_argument("--role-arn", help="Append the --role-arn argument to the kubectl commands")
parser.add_argument("-v", "--verbose", help="Verbose output", action="store_true", default=False)
parser.add_argument("-f", "--file", help="Write the output to a file instead of stdout")

args = parser.parse_args()

if args.profile:
    try:
      boto3.setup_default_session(profile_name=args.profile)
    except:
      print("Profile " + args.profile + " not found, check aws cli configuration")
      exit()

if args.file:
    if args.file == "":
        print("--file argument requires a filename")

def main():

    regions = []

    if args.role_arn:
        command = "aws eks update-kubeconfig --region {} --name {} --role-arn " + args.role_arn
    else:
        command = "aws eks update-kubeconfig --region {} --name {}"
    
    if args.region:
        regions = [args.region]

    else:
        # List all regions available
        client = boto3.client('ec2')
        regions = [region['RegionName'] for region in client.describe_regions()['Regions']]

    found_clusters = []

    for region in regions:
        clusters, marker = list_clusters(aws_region=region)
    
        if clusters:
            while True:
                for cluster in clusters:
                    found_clusters.append( [ cluster, region ] )

                # If no more clusters exist, exit loop, otherwise retrieve the next batch
                if marker is None:
                    break
                clusters, marker = list_clusters(iter_marker=marker, aws_region=region)

        # else:
            # print(region + ' - No clusters found')

    output = ""

    if found_clusters:
        for cluster_region in found_clusters:
            cluster = cluster_region[0]
            region = cluster_region[1]

            if args.profile:
                c = command.format(region,cluster) + " --profile " + args.profile
            else:
                c = command.format(region,cluster)
                
            if args.verbose:
                print(c)
                
            kubectl = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()
            get_pods = subprocess.Popen("kubectl get pods", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            match = False
            for line in io.TextIOWrapper(get_pods.stdout, encoding="utf-8"):
                re_match = re.search(r'.*' + args.search + '.*', line)
                if re_match:
                    match = True
                    break

            if match == True:
                det = cluster_details(cluster, region)
                createdAt = det['createdAt'].strftime("%Y-%m-%d, %H:%M:%S")
                version = det['version']
                try:
                    CreatedBy = det['tags']["CreatedBy"]
                except:
                    CreatedBy = "Unset"

                output += region + "/" + cluster + " (Created by " + CreatedBy + " on " + createdAt + ") - " + args.search + " found\n"
                
            else:
                det = cluster_details(cluster, region)
                createdAt = det['createdAt'].strftime("%Y-%m-%d, %H:%M:%S")
                version = det['version']
                
                try:
                    CreatedBy = det['tags']["CreatedBy"]
                except:
                    CreatedBy = "Unset"
                    
                output += region + "/" + cluster + " (Created by " + CreatedBy + " on " + createdAt + ") - " + args.search + " NOT found\n"

            get_pods.wait()


    if args.file:
        scriptPath = (os.path.dirname(os.path.realpath(__file__)))
        with open(scriptPath + "/" + args.file, 'w') as logfile:
            logfile.write(output)
    else:
        print(output)


def list_clusters(max_clusters=10, iter_marker='', aws_region='eu-west-1'):

    eks = boto3.client('eks', region_name=aws_region)

    clusters = eks.list_clusters(maxResults=max_clusters, nextToken=iter_marker)
    marker = clusters.get('nextToken')
    return clusters['clusters'], marker

def cluster_details(cluster_name, aws_region):
    eks = boto3.client('eks', region_name=aws_region)
    
    try:
        response = eks.describe_cluster(name=cluster_name)
    except Exception as e:
        print(e)
        # e.response['Error']['Code'] == 'ResourceNotFoundException'
        return None
    return response['cluster']


if __name__ == '__main__': main()

